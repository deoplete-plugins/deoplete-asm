// Copyright 2016 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// The protocol buffers below are used to store information about instructions.

syntax = "proto2";

package exegesis;

import "exegesis/proto/x86/encoding_specification.proto";
import "exegesis/proto/microarchitecture.proto";

// The Intel documentation referred to here can be found at:
// http://www.intel.com/content/dam/www/public/us/en/documents/manuals/64-ia-32-architectures-software-developer-instruction-set-reference-manual-325383.pdf

// Contains information about a single operand of a function.
message InstructionOperand {
  // The name of the operand, as listed by the vendor.
  optional string name = 4;

  // Defines the possible addressing modes of an operand.
  // clang-format off
  enum AddressingMode {
    // The operand can be using any addressing mode.
    ANY_ADDRESSING_MODE = 0x0;

      // The operand is an immediate value, and its value is stored directly
      // in the encoded instruction.
      NO_ADDRESSING = 0x1;

      // The operand can use either direct or indirect addressing using one or
      // more registers whose indices are explicitly encoded in the instruction.
      ANY_ADDRESSING_WITH_FLEXIBLE_REGISTERS = 0x2;

        // The operand uses direct addressing. The operand is the register whose
        // index is encoded in the instruction.
        DIRECT_ADDRESSING = 0x21;

        // The operand uses indirect addressing. The operand is the memory
        // location addressed by zero or more registers.
        INDIRECT_ADDRESSING = 0x22;

          // The memory is addressed using a base register.
          INDIRECT_ADDRESSING_WITH_BASE = 0x221;

          // The memory is addressed using only a displacement (the address of the
          // memory location is hard-coded in the instruction).
          INDIRECT_ADDRESSING_WITH_DISPLACEMENT = 0x222;

          // The memory is addressed using a base register and a displacement.
          INDIRECT_ADDRESSING_WITH_BASE_AND_DISPLACEMENT = 0x223;

          // The memory is addressed using a base register, an index register
          // and a displacement.
          INDIRECT_ADDRESSING_WITH_BASE_DISPLACEMENT_AND_INDEX = 0x224;

          // The memory is addressed using the x86-64 VSIB addressing scheme.
          INDIRECT_ADDRESSING_WITH_VSIB = 0x225;

      // The operand uses either direct or indirect addressing using a register
      // that is fixed for the given instruction class, and it can't be changed
      // in the encoding.
      ANY_ADDRESSING_WITH_FIXED_REGISTERS = 0x3;

        // The memory is addressed using the source index register RSI.
        INDIRECT_ADDRESSING_BY_RSI = 0x31;

        // The memory is addressed using the destination index register RDI.
        INDIRECT_ADDRESSING_BY_RDI = 0x32;
  }
  // clang-format on

  // Defines the possible ways of encoding an operand.
  // clang-format off
  enum Encoding {
    // The operand can be using any encoding. This value must not never be used
    // in practice.
    /* ABSTRACT */ ANY_ENCODING = 0;
      // The operand is a register operand of an x86-64 instruction.
      /* ABSTRACT */ X86_REGISTER_ENCODING = 0x1;
        // The operand is encoded in the opcode of the instruction.
        OPCODE_ENCODING = 0x11;

        // The operand is encoded using the ModR/M byte.
        /* ABSTRACT */ MODRM_ENCODING = 0x12;

          // The operand is encoded in the modrm.reg bits.
          MODRM_REG_ENCODING = 0x121;

          // The operand is encoded in the modrm.rm bits, and optionally also in
          // the SIB byte.
          MODRM_RM_ENCODING = 0x122;

        // The operand is an operand of a VEX/EVEX instruction, and it is
        // encoded in one of the ways introduced with VEX encoding.
        /* ABSTRACT */ VEX_ENCODING = 0x13;

          // The operand is encoded in the vex.vvvv bits of the VEX/EVEX prefix.
          VEX_V_ENCODING = 0x131;

          // The operand is encoded in the VEX operand suffix.
          VEX_SUFFIX_ENCODING = 0x132;

        // The operand is a part of an EVEX instruction, and it is encoded in
        // one of the ways introduced with the EVEX encoding.
        /* ABSTRACT */ EVEX_ENCODING = 0x14;

          // The operand is the masking register and it is encoded in the
          // evex.aaa bits of the EVEX prefix.
          EVEX_MASK_OPERAND_ENCODING = 0x141;

      // The operand is an implicit operand of the instruction.
      IMPLICIT_ENCODING = 0x2;

      // The operand is an immediate value. Its value is stored as a part of the
      // instruction encoding.
      IMMEDIATE_VALUE_ENCODING = 0x3;

      // The operand is encoded using the VSIB scheme.
      VSIB_ENCODING = 0x4;
  }
  // clang-format on

  // The addressing mode used (allowed) by the operand.
  optional AddressingMode addressing_mode = 1;

  // The encoding of the operand.
  optional Encoding encoding = 2;

  // Contains information about the data type of an operand.
  //
  // Note that this is the logical data type the instruction uses to perform the
  // operation, which may be a different size to the location the value is read
  // from or written to, e.g. instructions which implicitly sign- or zero-extend
  // operands or results, opmask registers which are only partially used for
  // smaller vector sizes.
  message DataType {
    enum Kind {
      UNKNOWN = 0;

      FLOATING_POINT = 1;

      UNSIGNED_INTEGER = 2;
      SIGNED_INTEGER = 3;

      // An aggregate value laid out according to some specified format. This is
      // usually only used by a few specialised instructions, e.g. LGDT in x86.
      STRUCT = 4;
    }

    // The type of the type.
    optional Kind kind = 1;

    // The number of bits used to represent the value. If the value is a vector,
    // this is only the size of a single element of the vector.
    optional int32 bit_width = 2;

    // If this is a vector value, the number of elements contained in the
    // vector. Each element is typed according to the fields above. For example,
    // the following DataType represents a 128-bit vector value containing 4
    // signed 32-bit ints:
    //    kind: SIGNED_INTEGER
    //    bit_width: 32
    //    vector_width: 4
    optional int32 vector_width = 3;
  }

  // The data type of the operand.
  optional DataType data_type = 7;

  // The size of the value in bits. This may differ from the size in data_type
  // in that it represents the "physical size" rather than the "logical size".
  // "Logical size" refers to the size of the data type that the instruction
  // operates on. "Physical size" refers to the size of the location the operand
  // is read from / written to. These may be different in some cases, such as
  // when a value is read from a register but only the low bits are used.
  optional int32 value_size_bits = 3;

  // This represents tags to mark masking (e.g. {k1}{z} or {k}), or specific
  // support (e.g. {er} or {sae}).
  message Tag {
    // Name, e.g. "k1", "er", ...
    optional string name = 1;
  }
  repeated Tag tags = 5;

  // How the operand is used: read, write, or both.
  enum Usage {
    USAGE_UNKNOWN = 0;
    USAGE_READ = 1;
    USAGE_WRITE = 2;
    USAGE_READ_WRITE = 3;
  }
  optional Usage usage = 6;
}

// Contains a list of measurements of the CPU events like the number of uoos
// issued, where they have been dispatched, and how many cycles were spent.
// The values are normalized to one instruction.
message ObservationVector {
  message Observation {
    // The name of the event. Added by PerfSubsystem::PopulateEventLists().
    optional string event_name = 1;

    // The measured value corresponding to the event.
    optional double measurement = 2;
  }
  repeated Observation observations = 1;
}

message InstructionFormat {
  // This is the key field for an instruction as there can be several
  // instructions with the same name, but differing opcodes, depending on the
  // addressing. There can also be instructions with different names and the
  // same opcode.
  optional string mnemonic = 1;

  // The information about the operands of the instructions. The operands are
  // listed in the order in which they appear in the vendor syntax
  // specification.
  repeated InstructionOperand operands = 3;
}

// Contains information about a single instruction.
// Next index to use: 33
message InstructionProto {
  // A human-readable description of what the instruction actually does.
  // See the abovementioned Intel document, sections 3.1 and later.
  optional string description = 1;

  // This is the key field for an instruction as there can be several
  // instructions with the same name, but differing opcodes, depending on the
  // addressing. There can also be instructions with different names and the
  // same opcode.
  optional string llvm_mnemonic = 2;

  // The instruction as defined in the manuals of the chip vendor. Note that
  // this field serves as a documentation/comment rather than for practical use,
  // and it might not compile with LLVM. To emit this instruction with LLVM, use
  // the data from 'syntax' instead.
  optional InstructionFormat vendor_syntax = 3;

  // The instruction in the LLVM variant of the assembly syntax used by the
  // chip vendor.
  optional InstructionFormat syntax = 4;

  // The instruction in the AT&T syntax of LLVM.
  optional InstructionFormat att_syntax = 5;

  // Contains the name of the instruction set extension the instruction belongs
  // to, for example "SSE2" or "AVX". Note that this is a string and not an enum
  // because we don't want this proto to depend on a particular CPU
  // infrastructure.
  // This can also hold combinations for feature names: "A && B" and "A || B"
  // respectively denote that the instruction requires both or any of features
  // A and B.
  optional string feature_name = 17;

  // Whether the instruction is available in 64-bit mode. This is not the
  // case for example for AAA.
  // TODO(bdb): use an enum to encode the reason why the instruction is not
  // available in 64-bit mode.
  optional bool available_in_64_bit = 18 [default = true];

  // True if the instruction is usable in "legacy" mode.
  // TODO(bdb): use an enum to encode the reason why the instruction is not
  // usable in legacy mode.
  optional bool legacy_instruction = 19 [default = true];

  // The encoding scheme for the instruction, as defined in the hereabove
  // mentioned Intel manual, section 2.1.5.
  optional string encoding_scheme = 20;

  // The minimum required protected mode. The exact meaning depends on the
  // architecture (e.g. x86-64 has 4 levels [0-3] and ARM has 8). The default is
  // to assume the least priviledged mode.
  optional int32 protection_mode = 29 [default = -1];

  // The size of the binary encoding of the instruction, in bytes.
  // TODO(ondrasej): The encoding size might or might not depend on the operands
  //                 of the instruction. We're already differentiating between
  //                 value sizes for registers and immediate values (these are
  //                 encoded in the instruction mnemonic). When working with
  //                 memory operands, the address might be composed of up to
  //                 three registers. We need to verify whether the size of the
  //                 encoding depends on the encoding and if it does, compute
  //                 the encoding size correctly.
  optional int32 binary_encoding_size_bytes = 21;

  // The encoding specification of the instruction, as provided by the designer
  // of the CPU instruction set. The exact format of the value is
  // platform-dependent:
  // * For x86 and x86-64, the encoding specification language used in the
  //   Intel(r) 64 and IA-32 Architectures Software Developer's Manual.
  optional string raw_encoding_specification = 22;

  // Names of the register operands that are read by the instruction even if
  // they are not explicitly listed in the encoded form or the assembly code.
  repeated string implicit_input_operands = 23;

  // Names of the register operands that are written by the instruction even if
  // they are not explicitly listed in the encoded form or the assembly code.
  repeated string implicit_output_operands = 24;

  // The parsed binary encoding specification. Which field is used depends on
  // the platform to which the instruction belongs.
  oneof encoding_specification {
    exegesis.x86.EncodingSpecification x86_encoding_specification = 30;
  }

  // The index of the instruction group this instruction belongs to.
  optional uint32 instruction_group_index = 32;
}

// Contains information about a group of instructions. (e.g. for Intel, this
// corresponds to a full table and associated description/algorithm
// specification/... in the SDM)
message InstructionGroupProto {
  // The group the instruction belong to. For example, VADDPS belongs to ADDPS.
  optional string name = 1;

  // A human-readable description of what the group of instructions actually
  // does.
  optional string description = 2;

  // A human-readable description of which flags are affected and how.
  message FlagsAffected {
    optional string content = 1;
  }

  repeated FlagsAffected flags_affected = 3;
}

// Stores information about the source of an instruction set, for debugging.
message InstructionSetSourceInfo {
  // The source used to create the instruction set.
  optional string source_name = 1;

  // Key/Value entries for metadata.
  message MetadataEntry {
    optional string key = 1;
    optional string value = 2;
  }
  repeated MetadataEntry metadata = 2;
}

message InstructionSetProto {
  // There might be several sources. For example historically the intel SDM was
  // distributed as two files with instructions A-M in Volume 2A and
  // instructions N-Z in volume 2B. When merging instruction sets, make sure
  // that there are no duplicate instructions.
  repeated InstructionSetSourceInfo source_infos = 3;

  repeated InstructionProto instructions = 4;

  repeated InstructionGroupProto instruction_groups = 5;
}


// The MicroOperation message describes a single micro-operation of the
// instruction. It describes the micro-operation in terms of the set of
// execution ports on which the micro-operation can be executed,
// the latency and the dependencies from the other micro-operations of
// the instruction. When executing a given micro-operation, the CPU picks
// one of the execution ports and sends the micro-operation there.
message MicroOperationProto {
  optional PortMaskProto port_mask = 1;
  optional int32 latency = 2 [default = 1];
  repeated int32 dependencies = 3;
  optional bool double_pumped = 4 [default = false];
  optional string likely_execution_unit = 5;
}

// The itinerary for an instruction.
message ItineraryProto {
  // This is useful to be able to read stored files more easily. For debug only.
  optional string llvm_mnemonic = 1;

  // The latency is the number of cycles, after which the output of the
  // instruction is ready, and any other instruction that uses this
  // output can be sent for execution.

  // The minimum latency for the instruction (for example for simple cases).
  optional int32 min_latency = 6;

  // The maximum latency for the instruction. For most of the basic instructions
  // the minimum latency is equal to the maximum latency.
  optional int32 max_latency = 7;

  // For complex instructions like ENTER or REP CMPS, the latency can be
  // proportional to the number of bytes treated by the instruction.
  optional double proportional_latency_per_byte = 8;

  // True if the latency is approximate. This is the case for complex
  // micro-coded instructions.
  optional bool latency_is_approximate = 9 [default = false];

  // The minimum throughput for the instruction (for example for simple cases).
  optional int32 min_throughput = 10;

  // The maximum throughput for the instruction. For most of the basic
  // instructions the minimum throughput is equal to the maximum throughput.
  optional int32 max_throughput = 11;

  // For complex instructions like ENTER or REP CMPS, the throughput can be
  // proportional to the number of bytes treated by the instruction.
  optional double proportional_throughput_per_byte = 12;

  // The number of micro-ops in the unfused domain, i.e. before macro-fusion
  // occurs.
  optional int32 num_uops_unfused_domain = 13;

  // The number of micro-ops in the unfused domain, i.e. before macro-fusion
  // occurs. For most instructions,
  // num_uops_unfused_domain >= num_uops_fused_domain.
  optional int32 num_uops_fused_domain = 14;

  // The following Boolean is true when the instruction is issued in
  // a standard way to the different execution units, by opposition to
  // micro-coded instructions.
  optional bool standard_execution = 15 [default = true];

  // An itinerary is an array of MicroOperations describing the
  // different steps that must be performed to execute the instruction.
  repeated MicroOperationProto micro_ops = 16;

  // Observation vector for throughput measurements.
  optional ObservationVector throughput_observation = 27;

  // Observation vector for latency measurements.
  optional ObservationVector latency_observation = 28;
}

// A set of instruction itineraries. This is always specific to a given
// microarchitecture.
message InstructionSetItinerariesProto {
  optional string microarchitecture_id = 1;
  repeated ItineraryProto itineraries = 2;
}

// Represents a set of per-model itineraries for an instruction set. The
// microarchitecture-specific information is kept separate from the ISA which is
// common to all microarchitectures.
message ArchitectureProto {
  // e.g. "x86_64".
  optional string name = 5;

  // The unannotated instruction set after applying transforms.
  optional InstructionSetProto instruction_set = 1;

  // Itineraries, per micro-architecture.
  repeated InstructionSetItinerariesProto per_microarchitecture_itineraries = 3;

  // The raw instruction set, for reference. This might not have the same number
  // of instructions as unannotated_instruction_set.
  optional InstructionSetProto raw_instruction_set = 2;
}

// Allows defining translation of instruction mnemonics from one or more source
// mnemonics to a target mnemonic.
//
// This is used to compensate for LLVM opcodes that do not correspond to a real
// x86 instruction and that are fixed by instruction lowering long after the
// instruciton scheduling pass. An example of such translation is the
// translation of MOV32ri64 (a LLVM-specific instruction) to MOV32ri (a valid
// x86 and x86-64 instruction).
message InstructionMnemonicTranslationProto {
  repeated string source_mnemonics = 1;
  optional string target_mnemonic = 2;
}

message InstructionMnemonicTranslationListProto {
  repeated InstructionMnemonicTranslationProto translations = 1;
}
