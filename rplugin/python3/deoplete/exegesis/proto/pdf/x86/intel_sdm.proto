// Copyright 2016 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

import "exegesis/proto/pdf/pdf_document.proto";
import "exegesis/proto/instructions.proto";

package exegesis.x86.pdf;

// The SDM document itself.
// The original PDF document contains chapters (e.g. "Chapter 1: About this
// manual", "Chapter 2: Instruction Format"). Some of these chapters are
// "Instruction Set Reference" chapters containing the one instruction per
// section.
message SdmDocument {
  repeated InstructionSection instruction_sections = 1;
}

// An InstructionSection represents a set of pages describing an instruction.
message InstructionSection {
  string id = 1;
  repeated SubSection sub_sections = 2;
  InstructionTable instruction_table = 3;
}

// A SubSection of an InstructionSection.
// It represents a paragraph such as "Instruction Operand Encoding", "Flags
// affected", "Description", ...
message SubSection {
  enum Type {
    UNKNOWN = 0;
    CPP_COMPILER_INTRISIC = 1;
    DESCRIPTION = 2;
    EFFECTIVE_OPERAND_SIZE = 3;
    EXCEPTIONS = 4;
    EXCEPTIONS_64BITS_MODE = 5;
    EXCEPTIONS_COMPATIBILITY_MODE = 6;
    EXCEPTIONS_FLOATING_POINT = 7;
    EXCEPTIONS_NUMERIC = 9;
    EXCEPTIONS_OTHER = 10;
    EXCEPTIONS_PROTECTED_MODE = 11;
    EXCEPTIONS_REAL_ADDRESS_MODE = 12;
    EXCEPTIONS_VIRTUAL_8086_MODE = 13;
    FLAGS_AFFECTED = 14;
    FLAGS_AFFECTED_FPU = 15;
    FLAGS_AFFECTED_INTEGER = 16;
    IA32_ARCHITECTURE_COMPATIBILITY = 17;
    IA32_ARCHITECTURE_LEGACY_COMPATIBILITY = 18;
    IMPLEMENTATION_NOTES = 19;
    INSTRUCTION_OPERAND_ENCODING = 20;
    INSTRUCTION_TABLE = 21;
    NOTES = 22;
    OPERATION = 23;
    OPERATION_IA32_MODE = 24;
    OPERATION_NON_64BITS_MODE = 25;
  }

  Type type = 1;

  // The rows for this subsection.
  repeated exegesis.pdf.PdfTextTableRow rows = 2;
}

// The description of a particular instruction table.
message InstructionTable {
  enum Mode {
    MODE_V = 0;
    MODE_I = 1;
    MODE_NE = 2;
    MODE_NP = 3;
    MODE_NI = 4;
    MODE_NS = 5;
  }

  enum Column {
    IT_DESCRIPTION = 0;
    IT_FEATURE_FLAG = 1;
    IT_INSTRUCTION = 2;
    IT_MODE_COMPAT_LEG = 3;
    IT_MODE_SUPPORT_64BIT = 4;
    IT_MODE_SUPPORT_64_32BIT = 5;
    IT_OPCODE = 6;
    IT_OPCODE_INSTRUCTION = 7;
    IT_OP_EN = 8;
    IT_UNKNOWN = 9;
  }

  repeated Column columns = 1;  // The columns for this instruction table.

  repeated InstructionProto instructions = 2;

  // This represents one crossreference in the operand encoding table.
  message OperandEncodingCrossref {
    string crossreference_name = 1;
    // Represents one operand within a crossreference. There are up to 4
    // operands.
    message OperandEncoding {
      enum OperandEncodingSpec {
        OE_NA = 0;
        OE_IMMEDIATE = 1;
        OE_MOD_RM = 2;
        OE_MOD_REG = 3;
        OE_VEX = 4;
        OE_OPCODE = 5;
        OE_IMPLICIT = 6;
        OE_REGISTERS = 7;
        OE_REGISTERS2 = 8;
        OE_CONSTANT = 9;
        OE_SIB = 10;
        OE_VSIB = 11;
        OE_EVEX_V = 12;
        OE_VEX_SUFFIX = 13;
      }
      OperandEncodingSpec spec = 1;
      // How the operand is used: read, write, or both.
      enum Usage {
        USAGE_UNKNOWN = 0;
        USAGE_READ = 1;
        USAGE_WRITE = 2;
        USAGE_READ_WRITE = 3;
      }
      Usage usage = 2;
    }
    repeated OperandEncoding operand_encodings = 2;
  }
  repeated OperandEncodingCrossref operand_encoding_crossrefs = 3;
}
